package main

import (
	"errors"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"golang.org/x/exp/rand"
)

type LitNightBot struct {
	bot      *tgbotapi.BotAPI
	dataPath string
}

var progressJokes = []string{
	"–î—É–º–∞—é... –¥—É–º–∞—é... –∫–∞–∂–µ—Ç—Å—è, –Ω–∞—à–µ–ª –∫–Ω–∏–≥—É, –∫–æ—Ç–æ—Ä–∞—è —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –º–µ–Ω—è –≤ –æ—Ç–≤–µ—Ç!",
	"–î–∞–π—Ç–µ –º–Ω–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥, –∫–Ω–∏–≥–∏ —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –±–æ–π –∑–∞ –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ!",
	"–°–µ–∫—É–Ω–¥—É... –º–Ω–µ –Ω—É–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å —É –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –∫—Ç–æ –≥–æ—Ç–æ–≤ –∫ –≤—Å—Ç—Ä–µ—á–µ.",
	"–¢–∞–∫, —Ç–∞–∫, —Ç–∞–∫... –∫–∞–∫–∞—è –∏–∑ –∫–Ω–∏–≥ —Å—Ç–∞–Ω–µ—Ç –∑–≤–µ–∑–¥–æ–π —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –≤–µ—á–µ—Ä–∞?",
	"–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –≤—Ä–∞—â–∞–µ—Ç—Å—è... –∏... –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤!",
	"–î–∞–π—Ç–µ –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∫–Ω–∏–≥–∏ –≤—Å–µ –µ—â–µ —Å–ø–æ—Ä—è—Ç, –∫—Ç–æ –∏–∑ –Ω–∏—Ö –ª—É—á—à–µ.",
	"–í—ã–±–∏—Ä–∞—é... –∫–∞–∂–µ—Ç—Å—è, –æ–¥–Ω–∞ –∏–∑ –∫–Ω–∏–≥ —à–µ–ø—á–µ—Ç –º–Ω–µ –Ω–∞ —É—Ö–æ!",
	"–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ... –æ, –∫–∞–∂–µ—Ç—Å—è, –æ–¥–Ω–∞ –∫–Ω–∏–≥–∞ —É–∂–µ –ø–æ–¥–º–∏–≥–Ω—É–ª–∞ –º–Ω–µ!",
	"–ö–Ω–∏–≥–∏ —Ç–∞–∫ –∏ –ø—Ä—ã–≥–∞—é—Ç –Ω–∞ –ø–æ–ª–∫—É, –¥–∞–π—Ç–µ –º–Ω–µ –º–∏–Ω—É—Ç–∫—É –∏—Ö —É—Å–ø–æ–∫–æ–∏—Ç—å!",
	"–ö–Ω–∏–≥–∏ –∏–≥—Ä–∞—é—Ç –≤ –ø—Ä—è—Ç–∫–∏, –Ω–æ —è –≤–æ—Ç-–≤–æ—Ç –∏—Ö –Ω–∞–π–¥—É!",
	"–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ... 99%, 99%, 99%... –û–π, –æ–ø—è—Ç—å –∑–∞–≤–∏—Å–ª–æ –Ω–∞ 99%.",
	"–ò—â—É –æ—Ç–≤–µ—Ç –≤ 42-—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏... –ø–æ—á—Ç–∏ –Ω–∞—à–µ–ª!",
	"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –ª—É–Ω—ã –≤ –≥–ª–∞–∑–∞—Ö –®—Ä–µ–∫–∞.",
	"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫–æ—Ç–∞–º. –û—Ç–≤–µ—Ç –æ—Ç –∫–æ—Ç–∞: '–º—è—É'. –ü–µ—Ä–µ–≤–æ–∂—É...",
	"–ü—Ä–æ–≤–æ–∂—É –º–Ω–æ–≥–æ—Ö–æ–¥–æ–≤–æ—á–∫—É, –∫–∞–∫ –®–µ—Ä–ª–æ–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–µ–∑–æ–Ω–µ.",
	"–ó–∞–ø—É—Å–∫–∞—é –∫–≤–∞–Ω—Ç–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä. –û–π, —ç—Ç–æ —Ç–æ—Å—Ç–µ—Ä, —Å–µ–∫—É–Ω–¥—É...",
	"–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é —É—Ç–æ–∫ –≤ –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
	"–°–µ–∫—É–Ω–¥—É... –Ω–∞—Ö–æ–∂—É –Ω—É–∂–Ω—É—é –∏–Ω—Ñ—É –≤ —Ñ–∞–π–ª–∞—Ö '–ú–µ–º—ã 2012-–≥–æ'.",
	"–ü—Ä–æ–≤–µ—Ä—è—é, —Ö–≤–∞—Ç–∏—Ç –ª–∏ –∫–æ–ª–±–∞—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.",
	"–°–µ–π—á–∞—Å, –æ–±–Ω—É–ª—è—é —Å—á–µ—Ç—á–∏–∫ –¥–Ω—è –±–µ–∑ –±–∞–≥–æ–≤... –û–π, –æ–Ω —Å–Ω–æ–≤–∞ —Å–ª–æ–º–∞–ª—Å—è.",
}

func (vb *LitNightBot) sendProgressJokes(chatId int64) {
	rand.Seed(uint64((time.Now().UnixNano())))

	numMessages := rand.Intn(3) + 3

	rand.Shuffle(len(progressJokes), func(i, j int) {
		progressJokes[i], progressJokes[j] = progressJokes[j], progressJokes[i]
	})

	for i := 0; i < numMessages; i++ {
		vb.sendMessage(chatId, progressJokes[i])

		sleepDuration := time.Duration(rand.Intn(1000)+1000) * time.Millisecond
		time.Sleep(sleepDuration)
	}
}

func (vb *LitNightBot) getCallbackParamStr(action, data string) string {
	return action + ":" + data
}

func (vb *LitNightBot) getCallbackParam(callbackData string) (string, string, error) {
	cb := strings.Split(callbackData, ":")

	if len(cb) != 2 {
		return "", "", errors.New("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: " + callbackData)
	}

	return cb[0], cb[1], nil
}

func (vb *LitNightBot) getChatDataFilePath(chatId int64) string {
	return filepath.Join(vb.dataPath, strconv.FormatInt(chatId, 10))
}

func (vb *LitNightBot) getChatData(chatId int64) *ChatData {
	var cd ChatData
	ReadJSONFromFile(vb.getChatDataFilePath(chatId), &cd)

	return &cd
}

func (vb *LitNightBot) setChatData(chatId int64, cd *ChatData) {
	WriteJSONToFile(vb.getChatDataFilePath(chatId), cd)
}

func (vb *LitNightBot) sendMessage(chatId int64, text string) {
	vb.bot.Send(tgbotapi.NewMessage(chatId, text))
}

func (vb *LitNightBot) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	cbAction, cbParam, err := vb.getCallbackParam(callback.Data)

	if err != nil {
		fmt.Println(err.Error())
		return
	}

	chatId := callback.Message.Chat.ID

	switch cbAction {
	case "remove":
		vb.removeBookFromWishList(chatId, cbParam)

		callbackConfig := tgbotapi.NewCallback(callback.ID, "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
		if _, err := vb.bot.Send(callbackConfig); err != nil {
			log.Printf("Error sending callback response: %v", err)
		}
		return
	default:
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback " + cbAction)
	}

}

func (vb *LitNightBot) handleStart(message *tgbotapi.Message) {
	chatId := message.Chat.ID

	filePath := vb.getChatDataFilePath(chatId)
	exists, _ := CheckFileExists(filePath)

	if !exists {
		var chatData ChatData
		vb.setChatData(chatId, &chatData)
	}

	vb.sendMessage(chatId,
		"–ü—Ä–∏–≤–µ—Ç, –∫–Ω–∏–∂–Ω—ã–µ —Ñ–∞–Ω–∞—Ç—ã! ‚ú®\n"+
			"–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –∫–ª—É–± –µ—â—ë –ª—É—á—à–µ!\n"+
			"üìö –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–∞–º–∏ –∫–Ω–∏–≥, "+
			"–≤—ã–±–∏—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å, —á—Ç–æ —É–∂–µ –æ–±—Å—É–∂–¥–∞–ª–∏.\n"+
			"–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —á—Ç–µ–Ω–∏–µ –µ—â—ë —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ –≤–º–µ—Å—Ç–µ!",
	)
}

func (vb *LitNightBot) handleList(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	cd := vb.getChatData(chatId)

	var names []string
	for _, item := range cd.Wishlist {
		names = append(names, item.Book.Name)
	}

	msg := strings.Join(names, "\n")

	if msg == "" {
		vb.sendMessage(chatId, "–í—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã, –∏ —Å–µ–π—á–∞—Å —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.\n"+
			"–°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–Ω–∏–≥–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!")
		return
	}
	vb.sendMessage(chatId, msg)
}

func (vb *LitNightBot) handleCurrent(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	cd := vb.getChatData(chatId)

	var msg string

	if cd.Current.Book.Name == "" {
		msg = "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏. –ö–∞–∫ –Ω–∞—Å—á—ë—Ç –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –¥–ª—è —á—Ç–µ–Ω–∏—è?"
	} else {
		msg = fmt.Sprintf("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã —á–∏—Ç–∞–µ—Ç–µ –∫–Ω–∏–≥—É \"%s\". –ö–∞–∫ –≤–∞–º –æ–Ω–∞? –î–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏!", cd.Current.Book.Name)
	}

	vb.sendMessage(chatId, msg)
}

func (vb *LitNightBot) handleCurrentRandom(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	cd := vb.getChatData(chatId)

	if cd.Current.Book.Name != "" {
		vb.sendMessage(chatId,
			fmt.Sprintf("–í—ã —É–∂–µ —á–∏—Ç–∞–µ—Ç–µ \"%s\"\n"+
				"–≠—Ç–∞ –∫–Ω–∏–≥–∞ –Ω–µ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç —Ç–∞–∫–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è!\n"+
				"–ù–æ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–æ–≤—É—é, –¥–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º –µ–µ –≤–º–µ—Å—Ç–µ!\n"+
				"–ù–æ —Å–Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏—Ç–µ –µ–π –æ–± –æ—Ç–º–µ–Ω–µ",
				cd.Current.Book.Name),
		)
		return
	}

	if len(cd.Wishlist) == 0 {
		vb.sendMessage(chatId, "–í–∞—à –≤–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–∏–≥–∏, —á—Ç–æ–±—ã —è –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –¥–ª—è –≤–∞—Å.")
		return
	}

	go func() {
		vb.sendProgressJokes(chatId)

		randomIndex := rand.Intn(len(cd.Wishlist))

		cd.Current = CurrentBook{cd.Wishlist[randomIndex].Book}
		cd.RemoveBookFromWishlist(cd.Wishlist[randomIndex].Book.Name)

		vb.setChatData(chatId, cd)

		vb.sendMessage(chatId, fmt.Sprintf("–¢–∞–¥–∞–∞–∞–º! –í–æ—Ç –≤–∞—à–∞ –∫–Ω–∏–≥–∞: \"%s\". –ü—Ä–∏—è—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è!", cd.Current.Book.Name))
	}()
}

func (vb *LitNightBot) handleAdd(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	bookname := message.CommandArguments()

	if bookname == "" {
		vb.sendMessage(chatId, "–≠–π, –∫–Ω–∏–∂–Ω—ã–π –∏—Å–∫–∞—Ç–µ–ª—å! üìö‚ú® –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É –≤ –≤–∞—à –≤–∏—à–ª–∏—Å—Ç, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ add, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/add –ú–æ—è –ø–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞")
		return
	}

	cd := vb.getChatData(chatId)

	if len(cd.Wishlist) >= 10 {
		vb.sendMessage(chatId,
			"–û–π-–æ–π! –ü–æ—Ö–æ–∂–µ, –≤–∞—à –≤–∏—à–ª–∏—Å—Ç —É–∂–µ –ø–æ–ª–æ–Ω –∫–Ω–∏–≥! üìö‚ú®\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ—â–∞–µ–º—Å—è —Å –æ–¥–Ω–æ–π –∏–∑ –Ω–∏—Ö.")
		return
	}

	cd.AddBookToWishlist(bookname)

	vb.setChatData(chatId, cd)

	vb.sendMessage(chatId, fmt.Sprintf("–ö–Ω–∏–≥–∞ \"%s\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫", bookname))
}

func (vb *LitNightBot) handleAddHistory(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	bookname := message.CommandArguments()

	if bookname == "" {
		vb.sendMessage(chatId,
			"–≠–π, –∫–Ω–∏–∂–Ω—ã–π –∏—Å–∫–∞—Ç–µ–ª—å! üìö‚ú®\n"+
				"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É –≤ –≤–∞—à –≤–∏—à–ª–∏—Å—Ç, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ history-add, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/history-add –ú–æ—è –ø–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞",
		)
		return
	}

	cd := vb.getChatData(chatId)

	cd.AddBookToHistory(bookname)

	vb.setChatData(chatId, cd)

	vb.sendMessage(chatId, fmt.Sprintf("–ö–Ω–∏–≥–∞ \"%s\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫", bookname))
}

func (vb *LitNightBot) handleRemove(message *tgbotapi.Message) {
	bookname := message.CommandArguments()

	if bookname == "" {
		vb.handleEmptyRemove(message)
		return
	}

	chatId := message.Chat.ID
	vb.removeBookFromWishList(chatId, bookname)
}

func (vb *LitNightBot) removeBookFromWishList(chatId int64, bookname string) {
	cd := vb.getChatData(chatId)
	err := cd.RemoveBookFromWishlist(bookname)
	vb.setChatData(chatId, cd)

	if err != nil {
		vb.sendMessage(chatId, err.Error())
		return
	}

	vb.sendMessage(chatId, fmt.Sprintf("–ö–Ω–∏–≥–∞ \"%s\" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞", bookname))
}

func (vb *LitNightBot) handleEmptyRemove(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	cd := vb.getChatData(chatId)

	if len(cd.Wishlist) == 0 {
		vb.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø—É—Å—Ç, —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ")
		return
	}

	var inlineButtons [][]tgbotapi.InlineKeyboardButton
	for _, item := range cd.Wishlist {
		bookname := item.Book.Name
		button := tgbotapi.NewInlineKeyboardButtonData(
			"‚ùå "+bookname,
			vb.getCallbackParamStr("remove", bookname),
		)

		inlineRow := tgbotapi.NewInlineKeyboardRow(button)

		inlineButtons = append(inlineButtons, inlineRow)
	}

	msg := tgbotapi.NewMessage(chatId, "–í–æ—Ç –≤–∞—à–∏ –∫–Ω–∏–≥–∏ –≤ —Å–ø–∏—Å–∫–µ:")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(inlineButtons...)
	msg.ReplyMarkup = keyboard

	vb.bot.Send(msg)
}

func (vb *LitNightBot) Init() {
	commands := []tgbotapi.BotCommand{
		{
			Command:     "list",
			Description: "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞",
		},
		{
			Command:     "add",
			Description: "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥ –≤ —Å–ø–∏—Å–æ–∫, –º—É–ª—å—Ç–∏–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º",
		},
		{
			Command:     "remove",
			Description: "—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞",
		},
		// {
		// 	Command:     "history",
		// 	Description: "–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö",
		// },
		{
			Command:     "add_history",
			Description: "–¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ",
		},
		// {
		// 	Command:     "remove_history",
		// 	Description: "—É–¥–∞–ª–∏—Ç—å –∏–∑ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö",
		// },
		{
			Command:     "current",
			Description: "–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–Ω–∏–≥—É",
		},
		// {
		// 	Command:     "current_deadline",
		// 	Description: "–Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–¥–ª–∞–π–Ω–∞ –ø–æ —Ç–µ–∫—É—â–µ–π –∫–Ω–∏–≥–µ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º",
		// },
		{
			Command:     "current_complete",
			Description: "–ø–æ–º–µ—Ç–∏—Ç—å –∫–Ω–∏–≥—É –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π",
		},
		{
			Command:     "current_random",
			Description: "–≤—ã–±—Ä–∞—Ç—å —Ä–∞–Ω–¥–æ–º–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞",
		},
		// {
		// 	Command:     "current_set",
		// 	Description: "–≤—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É –≤—Ä—É—á–Ω—É—é",
		// },
		// {
		// 	Command:     "current_abort", // —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø—Ä–æ —É–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≤–∏—à–ª–∏—Å—Ç
		// 	Description: "–æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–Ω–∏–≥—É (–≤–µ—Ä–Ω—É—Ç—å –≤ —Å–ø–∏—Å–æ–∫?)",
		// },
		// {
		// 	Command:     "help",
		// 	Description: "–≤—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏",
		// },
	}

	_, err := vb.bot.Request(tgbotapi.NewSetMyCommands(commands...))
	if err != nil {
		log.Panic(err)
	}
}

func (vb *LitNightBot) handleMessage(update *tgbotapi.Update) {
	if !update.Message.IsCommand() {
		return
	}

	switch update.Message.Command() {
	case "start":
		vb.handleStart(update.Message)
	case "list":
		vb.handleList(update.Message)
	case "add": // TODO —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∞–≤—Ç–æ—Ä–∞
		vb.handleAdd(update.Message)
	case "current":
		vb.handleCurrent(update.Message)
	case "current_random":
		vb.handleCurrentRandom(update.Message)
	case "remove":
		vb.handleRemove(update.Message)
	case "history-add":
		vb.handleAddHistory(update.Message)
	default:
		vb.sendMessage(update.Message.Chat.ID, "Unknown command")
	}
}

func (vb *LitNightBot) Start() {
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60

	updates := vb.bot.GetUpdatesChan(updateConfig)

	for update := range updates {
		if update.CallbackQuery != nil {
			vb.handleCallbackQuery(update.CallbackQuery)
			continue
		}

		if update.Message != nil {
			vb.handleMessage(&update)
		}

	}
}

func NewLitNightBot() LitNightBot {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		panic("failed to retrieve the Telegram token from the environment")
	}

	dataPath := os.Getenv("DATA_PATH")
	if dataPath == "" {
		panic("failed to retrieve path to storage chats data")
	}

	bot, err := GetBot(token, true)

	if err != nil {
		panic(err)
	}

	return LitNightBot{bot, dataPath}
}

func GetBot(token string, isDebug bool) (*tgbotapi.BotAPI, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	bot.Debug = isDebug
	log.Printf("Authorized on account %s", bot.Self.UserName)
	return bot, nil
}
