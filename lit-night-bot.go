package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"golang.org/x/exp/rand"
)

type UserAction string

const (
	UAStart           UserAction = "start"
	UAList            UserAction = "list"
	UAAdd             UserAction = "add"
	UACurrent         UserAction = "current"
	UACurrentSet      UserAction = "current_set"
	UACurrentRandom   UserAction = "current_random"
	UACurrentAbort    UserAction = "current_abort"
	UACurrentComplete UserAction = "current_complete"
	UACurrentDeadline UserAction = "current_deadline"
	UARemove          UserAction = "remove"
	UAHistory         UserAction = "history"
	UAHistoryAdd      UserAction = "history_add"
	UAHistoryRemove   UserAction = "history_remove"
)

type LitNightBot struct {
	bot      *tgbotapi.BotAPI
	dataPath string
}

func (vb *LitNightBot) sendProgressJokes(chatId int64) {
	rand.Seed(uint64((time.Now().UnixNano())))

	numMessages := rand.Intn(3) + 3

	rand.Shuffle(len(ProgressJokes), func(i, j int) {
		ProgressJokes[i], ProgressJokes[j] = ProgressJokes[j], ProgressJokes[i]
	})

	for i := 0; i < numMessages; i++ {
		vb.sendMessage(chatId, ProgressJokes[i])

		sleepDuration := time.Duration(rand.Intn(1000)+1000) * time.Millisecond
		time.Sleep(sleepDuration)
	}
}

func (vb *LitNightBot) getChatDataFilePath(chatId int64) string {
	return filepath.Join(vb.dataPath, strconv.FormatInt(chatId, 10))
}

func (vb *LitNightBot) getChatData(chatId int64) *ChatData {
	var cd ChatData
	ReadJSONFromFile(vb.getChatDataFilePath(chatId), &cd)

	return &cd
}

func (vb *LitNightBot) setChatData(chatId int64, cd *ChatData) {
	WriteJSONToFile(vb.getChatDataFilePath(chatId), cd)
}

func (vb *LitNightBot) editMessage(chatId int64, msgID int, text string, buttons [][]tgbotapi.InlineKeyboardButton) error {
	editMsg := tgbotapi.NewEditMessageText(chatId, msgID, text)
	var markup tgbotapi.InlineKeyboardMarkup
	if len(buttons) > 0 {
		markup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
		editMsg.ReplyMarkup = &markup
	} else {
		editMsg.ReplyMarkup = nil
	}
	_, err := vb.bot.Send(editMsg)

	return err
}

func (vb *LitNightBot) sendMessage(chatId int64, text string) {
	vb.bot.Send(tgbotapi.NewMessage(chatId, text))
}

func (vb *LitNightBot) moveCurrentBook(chatId int64, messageID int, moveToHistory bool) {
	cd := vb.getChatData(chatId)
	currentBookName := cd.Current.Book.Name
	if moveToHistory {
		cd.AddBookToHistory(currentBookName)
	} else {
		cd.AddBookToWishlist(currentBookName)
	}
	cd.Current = CurrentBook{}
	vb.setChatData(chatId, cd)

	if moveToHistory {
		vb.editMessage(
			chatId,
			messageID,
			fmt.Sprintf(
				"üìñ –ö–Ω–∏–≥–∞ \"%s\" —Ç–µ–ø–µ—Ä—å –≤ –∏—Å—Ç–æ—Ä–∏–∏!\n–í—Ä–µ–º—è –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–∫–ª—é—á–µ–Ω—á–µ—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é! üöÄ",
				currentBookName,
			),
			nil,
		)
	} else {
		vb.editMessage(
			chatId,
			messageID,
			fmt.Sprintf(
				"üìù –ö–Ω–∏–≥–∞ \"%s\" –≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è!\n–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å –Ω–æ–≤—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é! üìö‚ú®",
				currentBookName,
			),
			nil,
		)
	}
}

func (vb *LitNightBot) handleCallbackQuery(update *tgbotapi.Update) {
	cbAction, cbParam, err := GetCallbackParam(update.CallbackQuery.Data)

	if err != nil {
		fmt.Println(err.Error())
		return
	}

	chatId := update.CallbackQuery.Message.Chat.ID
	messageId := update.CallbackQuery.Message.MessageID

	switch cbAction {
	case CBRemove:
		cd := vb.getChatData(chatId)
		_, err := cd.RemoveBookFromWishlist(cbParam)
		vb.setChatData(chatId, cd)

		if err != nil {
			vb.sendMessage(chatId, err.Error())
			return
		}

		callbackConfig := tgbotapi.NewCallback(
			update.CallbackQuery.ID,
			"üéâ –£—Ä–∞! –ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π! üìö",
		)
		vb.bot.Send(callbackConfig)

		text, buttons := getCleanWishlistMessage(cd)
		vb.editMessage(chatId, messageId, text, buttons)
		return
	case CBRemovePage:
		page, err := strconv.Atoi(cbParam)
		if err != nil {
			vb.sendMessage(chatId, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
			return
		}
		vb.showRemoveWishlistPage(chatId, messageId, page)

	case CBCancel:
		vb.editMessage(chatId, update.CallbackQuery.Message.MessageID, "ü§≠ –£–ø—Å! –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ! –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è! üòâ", nil)

	case CBCurrentToHistory:
		vb.moveCurrentBook(chatId, update.CallbackQuery.Message.MessageID, true)

	case CBCurrentToWishlist:
		vb.moveCurrentBook(chatId, update.CallbackQuery.Message.MessageID, false)

	default:
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: %s. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ–± —ç—Ç–æ–º, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–º–æ—á—å –≤–∞–º –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–Ω–∏–≥—É! üìöüòÖ", string(cbAction))
	}
}

func (vb *LitNightBot) handleStart(message *tgbotapi.Message) {
	chatId := message.Chat.ID

	filePath := vb.getChatDataFilePath(chatId)
	exists, _ := CheckFileExists(filePath)

	if !exists {
		var chatData ChatData
		vb.setChatData(chatId, &chatData)
	}

	vb.sendMessage(chatId,
		"–ü—Ä–∏–≤–µ—Ç, –∫–Ω–∏–∂–Ω—ã–µ —Ñ–∞–Ω–∞—Ç—ã! ‚ú®\n"+
			"–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –∫–ª—É–± –µ—â—ë –ª—É—á—à–µ!\n"+
			"üìö –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–∞–º–∏ –∫–Ω–∏–≥, "+
			"–≤—ã–±–∏—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å, —á—Ç–æ —É–∂–µ –æ–±—Å—É–∂–¥–∞–ª–∏.\n"+
			"–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —á—Ç–µ–Ω–∏–µ –µ—â—ë —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ –≤–º–µ—Å—Ç–µ!",
	)
}

func (vb *LitNightBot) handleWishlist(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	cd := vb.getChatData(chatId)

	names := cd.GetWishlistBooks()

	if len(names) == 0 {
		vb.sendMessage(chatId, "–í—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã, –∏ —Å–µ–π—á–∞—Å —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.\n"+
			"–°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–Ω–∏–≥–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!")
		return
	}

	vb.sendMessage(chatId, GetWishlistMessage(names))
}

func (vb *LitNightBot) handleHistoryList(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	cd := vb.getChatData(chatId)

	names := cd.GetHistoryBooks()

	if len(names) == 0 {
		vb.sendMessage(chatId,
			"–ö–∞–∂–µ—Ç—Å—è, —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –ø–æ–∫–∞ –ø—É—Å—Ç... üòï\n"+
				"–ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –∏ —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –∫–Ω–∏–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! üìöüí™",
		)
		return
	}

	vb.sendMessage(chatId, "–í–æ—Ç –≤–∞—à–∏ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:\n\n‚úî "+strings.Join(names, "\n‚úî ")+"\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üëèüìñ")
}

func (vb *LitNightBot) handleCurrent(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	cd := vb.getChatData(chatId)

	var msg string

	if cd.Current.Book.Name == "" {
		msg = "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏. –ö–∞–∫ –Ω–∞—Å—á—ë—Ç –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –¥–ª—è —á—Ç–µ–Ω–∏—è?"
	} else {
		msg = fmt.Sprintf(
			"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã —á–∏—Ç–∞–µ—Ç–µ –∫–Ω–∏–≥—É \"%s\" üìñ\n"+
				"–ö–∞–∫ –≤–∞–º –æ–Ω–∞? –î–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏! üòä\n"+
				"–ö—Å—Ç–∞—Ç–∏, —É –≤–∞—Å –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–µ–¥–ª–∞–π–Ω –Ω–∞ %s.\n"+
				"–ù–∞–¥–µ—é—Å—å, –¥–æ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –Ω–µ –ø–æ—Ç–µ—Ä—è–µ—Ç–µ—Å—å –≤ –º–∏—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü! üìÖüòà",
			cd.Current.Book.Name, cd.Current.Deadline.Format(DATE_LAYOUT))
	}

	vb.sendMessage(chatId, msg)
}

const DATE_LAYOUT = "02.01.2006"

func (vb *LitNightBot) handleCurrentDeadline(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	cd := vb.getChatData(chatId)

	if cd.Current.Book.UUID == "" {
		vb.sendMessage(
			chatId,
			"–•–µ–π-—Ö–µ–π! üöÄ\n"+
				"–ü–æ—Ö–æ–∂–µ, –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π!\n"+
				"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏ ‚Äî —ç—Ç–æ –∫–∞–∫ –ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∫–µ—Ç—É –±–µ–∑ —Ç–æ–ø–ª–∏–≤–∞. üöÄüí®\n"+
				"–î–∞–≤–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–µ–º –∫–Ω–∏–≥—É, –∞ –ø–æ—Ç–æ–º —É–∂–µ –æ–±—Å—É–¥–∏–º, –∫–æ–≥–¥–∞ –±—É–¥–µ–º –µ—ë —á–∏—Ç–∞—Ç—å! –¢–∞–∫ –º—ã —Ç–æ—á–Ω–æ –Ω–µ —É–ª–µ—Ç–∏–º –≤ –Ω–∏–∫—É–¥–∞! üìñ‚ú®",
		)
		return
	}

	dateStr := message.CommandArguments()

	date, err := time.Parse(DATE_LAYOUT, dateStr)

	if err != nil {
		vb.sendMessage(
			chatId,
			"–û–π-–æ–π, –∫–∞–∂–µ—Ç—Å—è, –≥–¥–µ-—Ç–æ –∑–∞–∫—Ä–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞! üìÖ\n"+
				"–Ø –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π —Ñ–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥–≥–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11.02.2024).\n"+
				"–î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑, —è –≤–µ—Ä—é –≤ —Ç–µ–±—è! üí™",
		)
		return
	}

	if date.Before(time.Now()) {
		vb.sendMessage(
			chatId,
			"–û–π, –ø–æ—Ö–æ–∂–µ –≤—ã —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ! üòÖ\n"+
				"–ú—ã, –∫–æ–Ω–µ—á–Ω–æ, –Ω–µ –î–æ–∫ –∏ –ú–∞—Ä—Ç–∏, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –ø—Ä–æ—à–ª–æ–µ –Ω–∞ DeLorean.\n"+
				"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ –±—É–¥—É—â–µ–≥–æ ‚Äî –≤–µ–¥—å —Ç–æ–ª—å–∫–æ –≤–ø–µ—Ä—ë–¥, –∫ –Ω–æ–≤—ã–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º! üöÄ‚è≥",
		)
	}

	cd.SetDeadline(date)
	vb.setChatData(chatId, cd)

	vb.sendMessage(
		chatId,
		fmt.Sprintf(
			"üåü –£—Ä–∞! –î–µ–¥–ª–∞–π–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! üåü\n\n"+
				"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É %s –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏. üïí‚ú®\n"+
				"–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ –º—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ, –µ—Å–ª–∏ –≤–∞—à–∏ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω—è—Ç—Å—è!\n\n"+
				"–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ —á—Ç–µ–Ω–∏–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ–º, –∞ –Ω–µ –≥–æ–Ω–∫–æ–π! üìöüí®",
			date.Format(DATE_LAYOUT),
		),
	)
}

func (vb *LitNightBot) handleCurrentSet(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	vb.sendMessage(chatId, "–ò–∑–≤–∏–Ω—è—é—Å—å, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. Stay tuned –∫–∞–∫ –≥—Ä–∏—Ç—Å—è")
	// bookname := message.CommandArguments()

	// if bookname == "" {
	// 	vb.sendMessage(chatId, "/current_set <bookname>")
	// 	return
	// }

	// cd := vb.getChatData(chatId)

	// if cd.Current.Book.Name != "" {
	// 	vb.sendMessage(chatId,
	// 		fmt.Sprintf("–û, –∫–∞–∂–µ—Ç—Å—è, –≤—ã —É–∂–µ —á–∏—Ç–∞–µ—Ç–µ \"%s\"! üìñ\n"+
	// 			"–ú–æ–∂–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏–º —ç—Ç—É –∫–Ω–∏–≥—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ? üòâ",
	// 			cd.Current.Book.Name,
	// 		))
	// 	return
	// }

	// book, err := cd.RemoveBookFromWishlist(bookname)
	// cd.SetCurrentBook(bookname)
	// vb.setChatData(chatId, cd)

	// if err != nil && len(cd.Wishlist) > 0 {
	// 	vb.sendMessage(
	// 		chatId,
	// 		"–ö–∞–∂–µ—Ç—Å—è, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–º–∏ –∫–Ω–∏–≥–∞ –Ω–µ –∏–∑ –≤–∞—à–µ–≥–æ –≤–∏—à–ª–∏—Å—Ç–∞. üìö\n"+
	// 			"–ú–æ–∂–µ—Ç, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ —á—Ç–µ–Ω–∏—è? üòÑ",
	// 	)
	// 	return
	// }

	// vb.sendMessage(
	// 	chatId,
	// 	fmt.Sprintf(
	// 		"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –Ω–æ–≤–∞—è –∫–Ω–∏–≥–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è ‚Äî \"%s\". üìö‚ú®\n"+
	// 			"–£–¥–∞—á–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è, –∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è! üòâ",
	// 		bookname,
	// 	),
	// )
}

func (vb *LitNightBot) handleCurrentComplete(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	cd := vb.getChatData(chatId)

	currentBook := cd.Current.Book.Name
	if currentBook == "" {
		vb.sendMessage(
			chatId,
			"–•–º–º... –ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–Ω–∏–≥–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —á—Ç–µ–Ω–∏—è.\n"+
				"–î–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ –ø–æ–≥—Ä—É–∑–∏–º—Å—è –≤ –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã! üìö‚ú®",
		)
		return
	}

	cd.AddBookToHistory(currentBook)
	cd.Current = CurrentBook{}

	vb.setChatData(chatId, cd)

	vb.sendMessage(
		chatId,
		fmt.Sprintf(
			"–£—Ä–∞! –ö–Ω–∏–≥–∞ \"%s\" –ø—Ä–æ—á–∏—Ç–∞–Ω–∞! üéâ\n"+
				"–ù–∞–¥–µ—é—Å—å, –æ–Ω–∞ –æ—Å—Ç–∞–≤–∏–ª–∞ –≤–∞–º –º–æ—Ä–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π.\n"+
				"–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–º—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é?",
			currentBook,
		),
	)
}

func (vb *LitNightBot) handleCurrentRandom(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	cd := vb.getChatData(chatId)

	if cd.Current.Book.Name != "" {
		vb.sendMessage(chatId,
			fmt.Sprintf("–í—ã —É–∂–µ —á–∏—Ç–∞–µ—Ç–µ \"%s\"\n"+
				"–≠—Ç–∞ –∫–Ω–∏–≥–∞ –Ω–µ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç —Ç–∞–∫–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è!\n"+
				"–ù–æ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–æ–≤—É—é, –¥–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º –µ–µ –≤–º–µ—Å—Ç–µ!\n"+
				"–ù–æ —Å–Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏—Ç–µ –µ–π –æ–± –æ—Ç–º–µ–Ω–µ",
				cd.Current.Book.Name),
		)
		return
	}

	if len(cd.Wishlist) == 0 {
		vb.sendMessage(chatId, "–í–∞—à –≤–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–∏–≥–∏, —á—Ç–æ–±—ã —è –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –¥–ª—è –≤–∞—Å.")
		return
	}

	go func() {
		vb.sendProgressJokes(chatId)

		randomIndex := rand.Intn(len(cd.Wishlist))
		randomBook := cd.Wishlist[randomIndex].Book
		cd.SetCurrentBook(randomBook)
		cd.RemoveBookFromWishlist(randomBook.UUID)

		vb.setChatData(chatId, cd)

		vb.sendMessage(chatId,
			fmt.Sprintf(
				"–¢–∞–¥–∞–∞–∞–º! –í–æ—Ç –≤–∞—à–∞ –∫–Ω–∏–≥–∞: \"%s\". –ü—Ä–∏—è—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è! üìö\n\n"+
					"–ò –≤–æ—Ç –≤–∞–º –ø—Ä–∏—è—Ç–Ω—ã–π –±–æ–Ω—É—Å: —è –Ω–∞–∑–Ω–∞—á–∏–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏ - %s!\n"+
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–¥–ª–∞–π–Ω–∞.\n\n"+
					"–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –≤—Ä–µ–º—è –Ω–µ —É—Å–∫–æ–ª—å–∑–Ω—É–ª–æ, –∫–∞–∫ –≤ \"–î–æ–∫—Ç–æ—Ä–µ –ö—Ç–æ\" ‚Äî –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ —Å–≤–æ–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–∏! üï∞Ô∏è",
				randomBook.Name, cd.Current.Deadline.Format(DATE_LAYOUT),
			),
		)
	}()
}

func (vb *LitNightBot) handleAdd(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	booknames := HandleMultiArgs(strings.Split(message.CommandArguments(), "\n"))

	if len(booknames) == 0 {
		vb.sendMessage(chatId, "–≠–π, –∫–Ω–∏–∂–Ω—ã–π –∏—Å–∫–∞—Ç–µ–ª—å! üìö‚ú® –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É –≤ –≤–∞—à –≤–∏—à–ª–∏—Å—Ç, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ add, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/add –ú–æ—è –ø–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞")
		return
	}

	cd := vb.getChatData(chatId)

	cd.AddBooksToWishlist(booknames)

	vb.setChatData(chatId, cd)

	if len(booknames) == 1 {
		vb.sendMessage(chatId, fmt.Sprintf("–ö–Ω–∏–≥–∞ \"%s\" –¥–æ–±–∞–≤–ª–µ–Ω–∞.", booknames[0]))
	} else {
		vb.sendMessage(chatId, fmt.Sprintf("–ö–Ω–∏–≥–∏ \"%s\" –¥–æ–±–∞–≤–ª–µ–Ω—ã.", strings.Join(booknames, "\", \"")))
	}
}

func (vb *LitNightBot) handleAddHistory(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	booknames := HandleMultiArgs(strings.Split(message.CommandArguments(), "\n"))

	if len(booknames) == 0 {
		vb.sendMessage(chatId,
			"–≠–π, –∫–Ω–∏–∂–Ω—ã–π –∏—Å–∫–∞—Ç–µ–ª—å! üìö‚ú®\n"+
				"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É –≤ –≤–∞—à –≤–∏—à–ª–∏—Å—Ç, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ history-add, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/history-add –ú–æ—è –ø–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞",
		)
		return
	}

	cd := vb.getChatData(chatId)

	cd.AddBooksToHistory(booknames)

	vb.setChatData(chatId, cd)

	if len(booknames) == 1 {
		vb.sendMessage(chatId, fmt.Sprintf("–ö–Ω–∏–≥–∞ \"%s\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é.", booknames[0]))
	} else {
		vb.sendMessage(chatId, fmt.Sprintf("–ö–Ω–∏–≥–∏ \"%s\" –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é.", strings.Join(booknames, "\", \"")))
	}
}

func (vb *LitNightBot) handleRemoveHistory(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	bookname := message.CommandArguments()

	if bookname == "" {
		vb.sendMessage(chatId,
			"–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –Ω—É–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ: /history_remove –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏\n"+
				"–¢–∞–∫–æ–≤ –ø—É—Ç—å!",
		)
		return
	}

	vb.removeBookFromHistory(chatId, bookname)
}

func (vb *LitNightBot) removeBookFromHistory(chatId int64, uuid string) {
	cd := vb.getChatData(chatId)
	book, err := cd.RemoveBookFromHistory(uuid)
	vb.setChatData(chatId, cd)

	if err != nil {
		vb.sendMessage(chatId, err.Error())
		return
	}

	vb.sendMessage(chatId, fmt.Sprintf("–ö–Ω–∏–≥–∞ \"%s\" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞", book.Name))
}

func getButtonsForBooklist[T HasBook](
	booklist *[]T,
	prefix string,
	cbParamsGetter func(uuid string) string,
) [][]tgbotapi.InlineKeyboardButton {
	var buttons [][]tgbotapi.InlineKeyboardButton

	if len(*booklist) == 0 {
		return buttons
	}

	for _, item := range *booklist {
		button := tgbotapi.NewInlineKeyboardButtonData(
			prefix+" "+item.GetBook().Name,
			cbParamsGetter(item.GetBook().UUID),
		)

		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(button))
	}

	button := tgbotapi.NewInlineKeyboardButtonData(
		"–û—Ç–º–µ–Ω–∞",
		GetCallbackParamStr(CBCancel, "_"),
	)

	inlineRow := tgbotapi.NewInlineKeyboardRow(button)

	return append(buttons, inlineRow)
}

func getCleanWishlistMessage(cd *ChatData) (string, [][]tgbotapi.InlineKeyboardButton) {
	buttons := getButtonsForBooklist(&cd.Wishlist, "‚ùå", func(uuid string) string { return GetCallbackParamStr(CBRemove, uuid) })

	if len(cd.Wishlist) == 0 {
		return "–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø—É—Å—Ç, —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ", buttons
	}

	return "–í–æ—Ç –≤–∞—à–∏ –∫–Ω–∏–≥–∏ –≤ —Å–ø–∏—Å–∫–µ:", buttons
}

const BooksPerPage = 5

func (vb *LitNightBot) handleRemoveFromWishlist(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	vb.showRemoveWishlistPage(chatId, -1, 0)
}

func (vb *LitNightBot) showRemoveWishlistPage(chatId int64, messageID int, page int) {
	cd := vb.getChatData(chatId)
	books := cd.GetWishlistBooks()

	if len(books) == 0 {
		vb.sendMessage(chatId, "–í–∞—à –≤–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–Ω–∏–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
		return
	}

	start := page * BooksPerPage
	end := start + BooksPerPage
	if end > len(books) {
		end = len(books)
	}

	booksOnPage := books[start:end]
	messageText := fmt.Sprintf("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d):\n\n", page+1)
	var buttons [][]tgbotapi.InlineKeyboardButton
	for i, book := range booksOnPage {
		button := tgbotapi.NewInlineKeyboardButtonData(
			book,
			GetCallbackParamStr(CBRemove, strconv.Itoa(start+i)),
		)
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(button))
	}

	var navButtons []tgbotapi.InlineKeyboardButton
	if start > 0 {
		navButtons = append(navButtons, tgbotapi.NewInlineKeyboardButtonData("‚¨Ö –ù–∞–∑–∞–¥", GetCallbackParamStr(CBRemovePage, strconv.Itoa(page-1))))
	}
	if end < len(books) {
		navButtons = append(navButtons, tgbotapi.NewInlineKeyboardButtonData("–í–ø–µ—Ä–µ–¥ ‚û°", GetCallbackParamStr(CBRemovePage, strconv.Itoa(page+1))))
	}

	if len(navButtons) > 0 {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(navButtons...))
	}

	if messageID == -1 {
		msg := tgbotapi.NewMessage(chatId, messageText)
		if len(buttons) > 0 {
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
		}

		vb.bot.Send(msg)
	} else {
		vb.editMessage(chatId, messageID, messageText, buttons)
	}
}

func (vb *LitNightBot) handleCurrentAbort(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	cd := vb.getChatData(chatId)

	currentBook := cd.Current.Book

	if currentBook.Name == "" {
		vb.sendMessage(
			chatId,
			"üö´ –û–π-–æ–π! –ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏.\n–ö–∞–∫ –Ω–∞—Å—á–µ—Ç —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é? üìö‚ú®",
		)
		return
	}

	msg := tgbotapi.NewMessage(chatId, fmt.Sprintf("ü§î –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –æ—Ç–º–µ–Ω—è–µ–º–æ–π –∫–Ω–∏–≥–æ–π \"%s\"?\n–î–∞–≤–∞–π—Ç–µ —Ä–µ—à–∏–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ! üéâ", currentBook.Name))

	buttons := []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData(
			"‚ùå –ù–∏–∫–æ–≥–¥–∞",
			GetCallbackParamStr(CBCurrentToHistory, currentBook.UUID),
		),
		tgbotapi.NewInlineKeyboardButtonData(
			"üïë –ü–æ—Ç–æ–º",
			GetCallbackParamStr(CBCurrentToWishlist, currentBook.UUID),
		),
		tgbotapi.NewInlineKeyboardButtonData(
			"–û—Ç–º–µ–Ω–∞",
			GetCallbackParamStr(CBCancel, "_"),
		),
	}

	inlineRow := tgbotapi.NewInlineKeyboardRow(buttons...)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(inlineRow)
	msg.ReplyMarkup = keyboard

	vb.bot.Send(msg)
}

func (vb *LitNightBot) Init() {
	commands := []tgbotapi.BotCommand{
		{
			Command:     string(UAList),
			Description: "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞",
		},
		{
			Command:     string(UAAdd),
			Description: "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥ –≤ —Å–ø–∏—Å–æ–∫, –º—É–ª—å—Ç–∏–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º",
		},
		{
			Command:     string(UARemove),
			Description: "—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞",
		},
		{
			Command:     string(UAHistory),
			Description: "–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö",
		},
		{
			Command:     string(UAHistoryAdd),
			Description: "–¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ",
		},
		{
			Command:     string(UAHistoryRemove),
			Description: "—É–¥–∞–ª–∏—Ç—å –∏–∑ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö",
		},
		{
			Command:     string(UACurrent),
			Description: "–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–Ω–∏–≥—É",
		},
		{
			Command:     "current_deadline",
			Description: "–Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–¥–ª–∞–π–Ω–∞ –ø–æ —Ç–µ–∫—É—â–µ–π –∫–Ω–∏–≥–µ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º",
		},
		{
			Command:     string(UACurrentComplete),
			Description: "–ø–æ–º–µ—Ç–∏—Ç—å –∫–Ω–∏–≥—É –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π",
		},
		{
			Command:     string(UACurrentRandom),
			Description: "–≤—ã–±—Ä–∞—Ç—å —Ä–∞–Ω–¥–æ–º–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞",
		},
		{
			Command:     string(UACurrentAbort),
			Description: "–æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –∫–Ω–∏–≥–∏",
		},
	}

	_, err := vb.bot.Request(tgbotapi.NewSetMyCommands(commands...))
	if err != nil {
		log.Panic(err)
	}
}

func (vb *LitNightBot) handleMessage(update *tgbotapi.Update) {
	if !update.Message.IsCommand() {
		return
	}

	cmd := UserAction(update.Message.Command())
	switch cmd {
	case UAStart:
		vb.handleStart(update.Message)
	case UAList:
		vb.handleWishlist(update.Message)
	case UAAdd: // TODO —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–æ–±–∞–≤–∏—Ç–µ–ª—è
		vb.handleAdd(update.Message)
	case UACurrent:
		vb.handleCurrent(update.Message)
	case UACurrentSet: // TODO remove?
		vb.handleCurrentSet(update.Message)
	case UACurrentRandom:
		vb.handleCurrentRandom(update.Message)
	case UACurrentAbort:
		vb.handleCurrentAbort(update.Message)
	case UACurrentComplete:
		vb.handleCurrentComplete(update.Message)
	case UACurrentDeadline:
		vb.handleCurrentDeadline(update.Message)
	case UARemove:
		vb.handleRemoveFromWishlist(update.Message)
	case UAHistory:
		vb.handleHistoryList(update.Message)
	case UAHistoryAdd:
		vb.handleAddHistory(update.Message)
	case UAHistoryRemove:
		vb.handleRemoveHistory(update.Message)
	default:
		vb.sendMessage(update.Message.Chat.ID, "Unknown command")
	}
}

func (vb *LitNightBot) Start() {
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60

	updates := vb.bot.GetUpdatesChan(updateConfig)

	for update := range updates {
		if update.CallbackQuery != nil {
			vb.handleCallbackQuery(&update)
			continue
		}

		if update.Message != nil {
			vb.handleMessage(&update)
			continue
		}
	}
}

func NewLitNightBot() LitNightBot {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		panic("failed to retrieve the Telegram token from the environment")
	}

	dataPath := os.Getenv("DATA_PATH")
	if dataPath == "" {
		panic("failed to retrieve path to storage chats data")
	}

	bot, err := GetBot(token, true)

	if err != nil {
		panic(err)
	}

	return LitNightBot{bot, dataPath}
}

func GetBot(token string, isDebug bool) (*tgbotapi.BotAPI, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	bot.Debug = isDebug
	log.Printf("Authorized on account %s", bot.Self.UserName)
	return bot, nil
}
