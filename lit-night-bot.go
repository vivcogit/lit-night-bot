package main

import (
	"errors"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type LitNightBot struct {
	bot      *tgbotapi.BotAPI
	dataPath string
}

type Book struct {
	Name string `json:"name"`
}

type HistoryItem struct {
	Book Book      `json:"book"`
	Date time.Time `json:"date"`
}

type ChatData struct {
	Wishlist []Book        `json:"wishlist"`
	History  []HistoryItem `json:"history"`
	Current  Book          `json:"current_book"`
}

func (vb *LitNightBot) getCallbackParamStr(action, data string) string {
	return action + ":" + data
}

func (vb *LitNightBot) getCallbackParam(callbackData string) (string, string, error) {
	cb := strings.Split(callbackData, ":")

	if len(cb) != 2 {
		return "", "", errors.New("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: " + callbackData)
	}

	return cb[0], cb[1], nil
}

func (vb *LitNightBot) getChatDataFilePath(chatId int64) string {
	return filepath.Join(vb.dataPath, strconv.FormatInt(chatId, 10))
}

func (vb *LitNightBot) getChatData(chatId int64) *ChatData {
	var cd ChatData
	ReadJSONFromFile(vb.getChatDataFilePath(chatId), &cd)

	return &cd
}

func (vb *LitNightBot) setChatData(chatId int64, cd *ChatData) {
	WriteJSONToFile(vb.getChatDataFilePath(chatId), cd)
}

func (vb *LitNightBot) sendMessage(chatId int64, text string) {
	vb.bot.Send(tgbotapi.NewMessage(chatId, text))
}

func (vb *LitNightBot) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	cbAction, cbParam, err := vb.getCallbackParam(callback.Data)

	if err != nil {
		fmt.Println(err.Error())
		return
	}

	chatId := callback.Message.Chat.ID

	switch cbAction {
	case "remove":
		vb.handleRemove(chatId, cbParam)
		callbackConfig := tgbotapi.NewCallback(callback.ID, "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
		if _, err := vb.bot.Send(callbackConfig); err != nil {
			log.Printf("Error sending callback response: %v", err)
		}
		return
	default:
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback " + cbAction)
	}

}

func (vb *LitNightBot) handleStart(chatId int64) {
	filePath := vb.getChatDataFilePath(chatId)
	exists, _ := CheckFileExists(filePath)

	if !exists {
		var chatData ChatData
		vb.setChatData(chatId, &chatData)
	}

	vb.sendMessage(chatId,
		"–ü—Ä–∏–≤–µ—Ç, –∫–Ω–∏–∂–Ω—ã–µ —Ñ–∞–Ω–∞—Ç—ã! ‚ú®\n"+
			"–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –∫–ª—É–± –µ—â—ë –ª—É—á—à–µ!\n"+
			"üìö –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–∞–º–∏ –∫–Ω–∏–≥, "+
			"–≤—ã–±–∏—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å, —á—Ç–æ —É–∂–µ –æ–±—Å—É–∂–¥–∞–ª–∏.\n"+
			"–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —á—Ç–µ–Ω–∏–µ –µ—â—ë —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ –≤–º–µ—Å—Ç–µ!",
	)
}

func (vb *LitNightBot) handleList(chatId int64) {
	cd := vb.getChatData(chatId)

	var names []string
	for _, book := range cd.Wishlist {
		names = append(names, book.Name)
	}

	msg := strings.Join(names, "\n")
	fmt.Println(msg, names, cd)
	if msg == "" {
		vb.sendMessage(chatId, "–í—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã, –∏ —Å–µ–π—á–∞—Å —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.\n"+
			"–°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–Ω–∏–≥–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!")
		return
	}
	vb.sendMessage(chatId, msg)
}

func (vb *LitNightBot) handleAdd(chatId int64, book string) {
	if book == "" {
		vb.sendMessage(chatId, "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –≤ —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –µ—ë –≤ –∫–æ–º–∞–Ω–¥–µ add, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/add –ú–æ—è –ø–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞")
		return
	}
	cd := vb.getChatData(chatId)

	cd.Wishlist = append(cd.Wishlist, Book{book})

	vb.setChatData(chatId, cd)

	vb.sendMessage(chatId, fmt.Sprintf("–ö–Ω–∏–≥–∞ \"%s\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫", book))
}

func (vb *LitNightBot) handleRemove(chatId int64, bookname string) {
	if bookname == "" {
		vb.sendMessage(chatId, "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –µ—ë –≤ –∫–æ–º–∞–Ω–¥–µ remove, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/remove –ú–æ—è –ø–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞")
		return
	}

	cd := vb.getChatData(chatId)

	index := -1
	for i, b := range cd.Wishlist {
		if strings.EqualFold(b.Name, bookname) {
			index = i
			break
		}
	}

	if index == -1 {
		vb.sendMessage(chatId, fmt.Sprintf("–ö–Ω–∏–≥–∞ \"%s\" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ", bookname))
		return
	}

	cd.Wishlist = append(cd.Wishlist[:index], cd.Wishlist[index+1:]...)

	vb.setChatData(chatId, cd)
	vb.sendMessage(chatId, fmt.Sprintf("–ö–Ω–∏–≥–∞ \"%s\" —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞", bookname))
}

// TODO add pagination
func (vb *LitNightBot) handleEmptyRemove(chatId int64) {
	cd := vb.getChatData(chatId)

	if len(cd.Wishlist) == 0 {
		vb.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø—É—Å—Ç, —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ")
		return
	}

	var inlineButtons [][]tgbotapi.InlineKeyboardButton
	for _, book := range cd.Wishlist {
		button := tgbotapi.NewInlineKeyboardButtonData("‚ùå "+book.Name, vb.getCallbackParamStr("remove", book.Name))

		inlineRow := tgbotapi.NewInlineKeyboardRow(button)

		inlineButtons = append(inlineButtons, inlineRow)
	}

	msg := tgbotapi.NewMessage(chatId, "–í–æ—Ç –≤–∞—à–∏ –∫–Ω–∏–≥–∏ –≤ —Å–ø–∏—Å–∫–µ:")

	keyboard := tgbotapi.NewInlineKeyboardMarkup(inlineButtons...)
	msg.ReplyMarkup = keyboard

	vb.bot.Send(msg)
}

func (vb *LitNightBot) Init() {
	commands := []tgbotapi.BotCommand{
		{
			Command:     "list",
			Description: "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞",
		},
		{
			Command:     "add",
			Description: "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥ –≤ —Å–ø–∏—Å–æ–∫, –º—É–ª—å—Ç–∏–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º",
		},
		{
			Command:     "remove",
			Description: "—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞",
		},
		// {
		// 	Command:     "history",
		// 	Description: "–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö",
		// },
		// {
		// 	Command:     "add_history",
		// 	Description: "–¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ",
		// },
		// {
		// 	Command:     "remove_history",
		// 	Description: "—É–¥–∞–ª–∏—Ç—å –∏–∑ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö",
		// },
		{
			Command:     "current",
			Description: "–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–Ω–∏–≥—É",
		},
		// {
		// 	Command:     "current_deadline",
		// 	Description: "–Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–¥–ª–∞–π–Ω–∞ –ø–æ —Ç–µ–∫—É—â–µ–π –∫–Ω–∏–≥–µ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º",
		// },
		// {
		// 	Command:     "current_complete",
		// 	Description: "–ø–æ–º–µ—Ç–∏—Ç—å –∫–Ω–∏–≥—É –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π",
		// },
		// {
		// 	Command:     "current_random",
		// 	Description: "–≤—ã–±—Ä–∞—Ç—å —Ä–∞–Ω–¥–æ–º–æ–º –∏–∑ —Å–ø–∏—Å–∫–∞",
		// },
		// {
		// 	Command:     "current_set",
		// 	Description: "–≤—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É –≤—Ä—É—á–Ω—É—é",
		// },
		// {
		// 	Command:     "current_abort",
		// 	Description: "–æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–Ω–∏–≥—É (–≤–µ—Ä–Ω—É—Ç—å –≤ —Å–ø–∏—Å–æ–∫?)",
		// },
		// {
		// 	Command:     "help",
		// 	Description: "–≤—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏",
		// },
	}

	_, err := vb.bot.Request(tgbotapi.NewSetMyCommands(commands...))
	if err != nil {
		log.Panic(err)
	}
}

func (vb *LitNightBot) handleMessage(update *tgbotapi.Update) {
	if !update.Message.IsCommand() {
		return
	}

	chatId := update.Message.Chat.ID
	cmdArg := update.Message.CommandArguments()

	switch update.Message.Command() {
	case "start":
		vb.handleStart(chatId)
	case "list":
		vb.handleList(chatId)
	case "add":
		vb.handleAdd(chatId, cmdArg)
	case "remove":
		if cmdArg == "" {
			vb.handleEmptyRemove(chatId)
			return
		}
		vb.handleRemove(chatId, cmdArg)
	default:
		vb.sendMessage(chatId, "Unknown command")
	}
}

func (vb *LitNightBot) Start() {
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60

	updates := vb.bot.GetUpdatesChan(updateConfig)

	for update := range updates {
		if update.CallbackQuery != nil {
			vb.handleCallbackQuery(update.CallbackQuery)
			continue
		}

		if update.Message != nil {
			vb.handleMessage(&update)
		}

	}
}

func NewLitNightBot() LitNightBot {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		panic("failed to retrieve the Telegram token from the environment")
	}

	dataPath := os.Getenv("DATA_PATH")
	if dataPath == "" {
		panic("failed to retrieve path to storage chats data")
	}

	bot, err := GetBot(token, true)

	if err != nil {
		panic(err)
	}

	return LitNightBot{bot, dataPath}
}

func GetBot(token string, isDebug bool) (*tgbotapi.BotAPI, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	bot.Debug = isDebug
	log.Printf("Authorized on account %s", bot.Self.UserName)
	return bot, nil
}
