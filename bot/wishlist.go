package bot

import (
	"fmt"
	"lit-night-bot/utils"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sirupsen/logrus"
)

func (lnb *LitNightBot) handleWishlistRemoveBook(message *tgbotapi.Message, cbId string, cbParams []string, logger *logrus.Entry) {
	chatId := message.Chat.ID
	logger.Info("Handling wishlist remove book")

	cd := lnb.getChatData(chatId)
	bookID := cbParams[0]

	_, err := cd.RemoveBookFromWishlist(bookID)
	lnb.setChatData(chatId, cd)

	if err != nil {
		logger.WithField("book_id", bookID).WithError(err).Error("Failed to remove book from wishlist")
		lnb.sendPlainMessage(chatId, err.Error())
		return
	}

	callbackConfig := tgbotapi.NewCallback(
		cbId,
		"üéâ –£—Ä–∞! –ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π! üìö",
	)
	lnb.bot.Send(callbackConfig)

	logger.WithField("book_id", bookID).Info("Book removed from wishlist")

	page, _ := strconv.Atoi(cbParams[1])
	lnb.showCleanWishlistPage(chatId, message.MessageID, page, logger)
}

func (lnb *LitNightBot) handleShowWishlist(message *tgbotapi.Message, logger *logrus.Entry) {
	chatId := message.Chat.ID
	logger.Info("Handling show wishlist")

	cd := lnb.getChatData(chatId)

	if len(cd.Wishlist) == 0 {
		logger.Info("Wishlist is empty")
		lnb.sendPlainMessage(
			chatId,
			"–í—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã, –∏ —Å–µ–π—á–∞—Å —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.\n"+
				"–°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–Ω–∏–≥–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!",
		)
		return
	}

	lnb.sendPlainMessage(
		chatId,
		"üìö –í–∞—à–∏ –∫–Ω–∏–≥–∏ –≤ –≤–∏—à–ª–∏—Å—Ç–µ:\n\n"+GetBooklistString(&cd.Wishlist),
	)
	logger.Info("Displayed wishlist books")
}

func (lnb *LitNightBot) handleWishlistClean(message *tgbotapi.Message, logger *logrus.Entry) {
	logger.Info("Handling wishlist clean")
	lnb.showCleanWishlistPage(message.Chat.ID, -1, 0, logger)
}

func (lnb *LitNightBot) handleWishlistAddRequest(message *tgbotapi.Message, logger *logrus.Entry) {
	logger.Info("Handling request to add book to wishlist")
	lnb.sendPlainMessage(message.Chat.ID, addBooksToWishlistRequestMessage)
}

func (lnb *LitNightBot) handleWishlistAdd(message *tgbotapi.Message, logger *logrus.Entry) {
	chatId := message.Chat.ID
	booknames := utils.CleanStrSlice(strings.Split(message.Text, "\n"))
	logger.WithField("booknames", booknames).Info("Adding books to wishlist")

	cd := lnb.getChatData(chatId)
	cd.AddBooksToWishlist(booknames)

	lnb.setChatData(chatId, cd)

	var textMessage string
	if len(booknames) == 1 {
		textMessage = fmt.Sprintf("–ö–Ω–∏–≥–∞ \"%s\" –¥–æ–±–∞–≤–ª–µ–Ω–∞.", booknames[0])
	} else {
		textMessage = fmt.Sprintf("–ö–Ω–∏–≥–∏ \"%s\" –¥–æ–±–∞–≤–ª–µ–Ω—ã.", strings.Join(booknames, "\", \""))
	}

	lnb.sendPlainMessage(chatId, textMessage)
	logger.Info("Books added to wishlist")
}

func (lnb *LitNightBot) getCleanWishlistMessage(chatId int64, page int, logger *logrus.Entry) (string, [][]tgbotapi.InlineKeyboardButton) {
	cd := lnb.getChatData(chatId)

	if len(cd.Wishlist) == 0 {
		logger.Info("Wishlist is empty")
		return "–í–∞—à –≤–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–Ω–∏–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", nil
	}

	booksOnPage, page, isLast := GetBooklistPage(&cd.Wishlist, page)

	buttons := GetCleanBooklistButtons(&booksOnPage, page, CBWishlistRemoveBook)

	navButtons := GetPaginationNavButtons(page, isLast, CBWishlistChangePage)

	if len(*navButtons) > 0 {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(*navButtons...))
	}

	messageText := fmt.Sprintf("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≤–∏—à–ª–∏—Å—Ç–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d):\n\n", page+1)

	return messageText, buttons
}

func (lnb *LitNightBot) showCleanWishlistPage(chatId int64, messageID int, page int, logger *logrus.Entry) {
	logger.WithField("messageID", messageID).WithField("page", page).Info("Showing clean wishlist page")
	messageText, buttons := lnb.getCleanWishlistMessage(chatId, page, logger)

	if messageID == -1 {
		lnb.sendMessage(chatId, SendMessageParams{Text: messageText, Buttons: buttons})
	} else {
		lnb.editMessage(chatId, messageID, messageText, buttons)
	}
}
