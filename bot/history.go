package bot

import (
	"fmt"
	"lit-night-bot/utils"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (lnb *LitNightBot) handleHistoryAddBook(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	booknames := utils.CleanStrSlice(strings.Split(message.Text, "\n"))

	if len(booknames) == 0 {
		lnb.sendPlainMessage(
			chatId,
			"–≠–π, –∫–Ω–∏–∂–Ω—ã–π –∏—Å–∫–∞—Ç–µ–ª—å! üìö‚ú®\n"+
				"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É –≤ –≤–∞—à –≤–∏—à–ª–∏—Å—Ç, –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ history-add, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/history-add –ú–æ—è –ø–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞",
		)
		return
	}

	cd := lnb.getChatData(chatId)

	cd.AddBooksToHistory(booknames)

	lnb.setChatData(chatId, cd)

	var msgText string
	if len(booknames) == 1 {
		msgText = fmt.Sprintf("–ö–Ω–∏–≥–∞ \"%s\" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é.", booknames[0])
	} else {
		msgText = fmt.Sprintf("–ö–Ω–∏–≥–∏ \"%s\" –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é.", strings.Join(booknames, "\", \""))
	}
	lnb.sendPlainMessage(chatId, msgText)
}

func (lnb *LitNightBot) handleHistoryRemoveBook(message *tgbotapi.Message, cbId string, cbParams []string) {
	chatId := message.Chat.ID

	cd := lnb.getChatData(chatId)
	_, err := cd.RemoveBookFromHistory(cbParams[0])
	lnb.setChatData(chatId, cd)

	if err != nil {
		lnb.sendPlainMessage(chatId, err.Error())
		return
	}

	callbackConfig := tgbotapi.NewCallback(
		cbId,
		"üéâ –£—Ä–∞! –ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π! üìö",
	)
	lnb.bot.Send(callbackConfig)

	page, _ := strconv.Atoi(cbParams[1])
	lnb.showCleanHistoryPage(chatId, message.MessageID, page)
}

func (lnb *LitNightBot) handleHistoryShow(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	cd := lnb.getChatData(chatId)

	names := cd.GetHistoryBooks()

	if len(names) == 0 {
		lnb.sendPlainMessage(
			chatId,
			"–ö–∞–∂–µ—Ç—Å—è, —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –ø–æ–∫–∞ –ø—É—Å—Ç... üòï\n"+
				"–ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –∏ —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –∫–Ω–∏–∂–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! üìöüí™",
		)
		return
	}

	lnb.sendPlainMessage(
		chatId,
		"–í–æ—Ç –≤–∞—à–∏ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:\n\n‚úî "+strings.Join(names, "\n‚úî ")+"\n\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üëèüìñ",
	)
}

func (lnb *LitNightBot) handleCleanHistory(message *tgbotapi.Message) {
	chatId := message.Chat.ID
	lnb.showCleanHistoryPage(chatId, -1, 0)
}

func (lnb *LitNightBot) GetCleanHistoryMessage(chatId int64, messageID int, page int) (string, [][]tgbotapi.InlineKeyboardButton) {
	cd := lnb.getChatData(chatId)

	if len(cd.History) == 0 {
		return "–ö–∞–∂–µ—Ç—Å—è, —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –ø–æ–∫–∞ –ø—É—Å—Ç... üòï\n", nil
	}

	booksOnPage, page, isLast := GetBooklistPage(&cd.History, page)

	buttons := GetCleanBooklistButtons(&booksOnPage, page, CBHistoryRemoveBook)

	navButtons := GetPaginationNavButtons(page, isLast, CBHistoryChangePage)

	if len(*navButtons) > 0 {
		buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(*navButtons...))
	}

	messageText := fmt.Sprintf("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d):\n\n", page+1)

	return messageText, buttons
}

func (lnb *LitNightBot) showCleanHistoryPage(chatId int64, messageID int, page int) {
	messageText, buttons := lnb.GetCleanHistoryMessage(chatId, messageID, page)

	if messageID == -1 {
		lnb.sendMessage(chatId, SendMessageParams{text: messageText, buttons: buttons})
	} else {
		lnb.editMessage(chatId, messageID, messageText, buttons)
	}
}
